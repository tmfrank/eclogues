{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.2)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Api_Consts where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Api_Types
tHRIFT_API_VERSION :: I.Int32
tHRIFT_API_VERSION = 3

cURRENT_API_VERSION :: APIVersion
cURRENT_API_VERSION = default_APIVersion{aPIVersion_major = 3}

aURORA_EXECUTOR_NAME :: LT.Text
aURORA_EXECUTOR_NAME = "AuroraExecutor"

aCTIVE_STATES :: Set.HashSet ScheduleStatus
aCTIVE_STATES = (Set.fromList [ASSIGNED,DRAINING,KILLING,PENDING,PREEMPTING,RESTARTING,RUNNING,STARTING,THROTTLED])

sLAVE_ASSIGNED_STATES :: Set.HashSet ScheduleStatus
sLAVE_ASSIGNED_STATES = (Set.fromList [ASSIGNED,DRAINING,KILLING,PREEMPTING,RESTARTING,RUNNING,STARTING])

lIVE_STATES :: Set.HashSet ScheduleStatus
lIVE_STATES = (Set.fromList [KILLING,PREEMPTING,RESTARTING,DRAINING,RUNNING])

tERMINAL_STATES :: Set.HashSet ScheduleStatus
tERMINAL_STATES = (Set.fromList [FAILED,FINISHED,KILLED,LOST])

gOOD_IDENTIFIER_PATTERN :: LT.Text
gOOD_IDENTIFIER_PATTERN = "^[\\w\\-\\.]+$"

gOOD_IDENTIFIER_PATTERN_JVM :: LT.Text
gOOD_IDENTIFIER_PATTERN_JVM = "^[\\w\\-\\.]+$"

gOOD_IDENTIFIER_PATTERN_PYTHON :: LT.Text
gOOD_IDENTIFIER_PATTERN_PYTHON = "^[\\w\\-\\.]+$"

aCTIVE_JOB_UPDATE_STATES :: Set.HashSet JobUpdateStatus
aCTIVE_JOB_UPDATE_STATES = (Set.fromList [ROLLING_FORWARD,ROLLING_BACK,ROLL_FORWARD_PAUSED,ROLL_BACK_PAUSED])

