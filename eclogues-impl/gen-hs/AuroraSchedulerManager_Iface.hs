{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.2)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module AuroraSchedulerManager_Iface where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Api_Types

import ReadOnlyScheduler_Iface
class ReadOnlyScheduler_Iface a => AuroraSchedulerManager_Iface a where
  createJob :: a -> JobConfiguration -> P.Maybe Lock -> SessionKey -> P.IO Response
  scheduleCronJob :: a -> JobConfiguration -> Lock -> SessionKey -> P.IO Response
  descheduleCronJob :: a -> JobKey -> Lock -> SessionKey -> P.IO Response
  startCronJob :: a -> JobKey -> SessionKey -> P.IO Response
  restartShards :: a -> JobKey -> (Set.HashSet I.Int32) -> Lock -> SessionKey -> P.IO Response
  killTasks :: a -> TaskQuery -> P.Maybe Lock -> SessionKey -> P.IO Response
  addInstances :: a -> AddInstancesConfig -> Lock -> SessionKey -> P.IO Response
  acquireLock :: a -> LockKey -> SessionKey -> P.IO Response
  releaseLock :: a -> Lock -> LockValidation -> SessionKey -> P.IO Response
  replaceCronTemplate :: a -> JobConfiguration -> Lock -> SessionKey -> P.IO Response
  startJobUpdate :: a -> JobUpdateRequest -> SessionKey -> P.IO Response
  pauseJobUpdate :: a -> JobKey -> SessionKey -> P.IO Response
  resumeJobUpdate :: a -> JobKey -> SessionKey -> P.IO Response
  abortJobUpdate :: a -> JobKey -> SessionKey -> P.IO Response
  pulseJobUpdate :: a -> LT.Text -> SessionKey -> P.IO Response
